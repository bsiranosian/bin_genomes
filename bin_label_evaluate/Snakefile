#!/usr/bin/env python
from os.path import join, abspath, expanduser

localrules: bwa_index_setup, postprocess_raw, postprocess_final, label_bins, bin_tig_mapping, metabat, fasta_index

samp = config['sample']
outdir = config['outdir_base']

# convert outdir to absolute path
if outdir[0] == '~':
    outdir = expanduser(outdir)
outdir = abspath(outdir)

if 'reads2' in config and not config['reads2'] == '':
    reads = [config['reads1'], config['reads2']]
else:
    reads = [config['reads1']]

if 'long_read' in config and config['long_read']:
    long_read = True
else:
    long_read = False

def get_bins(wildcards):
    outputs = checkpoints.metabat.get(**wildcards).output[0]
    return glob_wildcards(os.path.join(outputs, "{bin}.fa")).bin

rule all:
    input:
        reads,
        config['assembly'],
        config['kraken2db'],
        expand(join(outdir, "{samp}/final/{samp}.tsv"), samp = config['sample']),

rule bwa_index_setup:
    input:
        config['assembly']
    output:
        join(outdir, "{samp}/idx/{samp}.fa")
    resources:
        mem=1,
        time=1
    threads: 1
    params:
        asm = config['assembly']
    shell: """
        cp {params.asm} {output}
        """

rule bwa_index:
    input:
        join(outdir, "{samp}/idx/{samp}.fa")
    output:
        join(outdir, "{samp}/idx/{samp}.fa.amb"),
        join(outdir, "{samp}/idx/{samp}.fa.ann"),
        join(outdir, "{samp}/idx/{samp}.fa.bwt"),
        join(outdir, "{samp}/idx/{samp}.fa.pac"),
        join(outdir, "{samp}/idx/{samp}.fa.sa")
    log:
        join(outdir, "{samp}/logs/bwa_index.log")
    singularity:
        "shub://bsiranos/bin_genomes/singularity:binning"
    resources:
        mem=8,
        time=2
    threads: 1
    shell: """
        bwa index {input}
        """

rule bwa_align:
    input:
        asm = join(outdir, "{samp}/idx/{samp}.fa"),
        reads = reads,
        amb = join(outdir, "{samp}/idx/{samp}.fa.amb"),
        ann = join(outdir, "{samp}/idx/{samp}.fa.ann"),
        bwt = join(outdir, "{samp}/idx/{samp}.fa.bwt"),
        pac = join(outdir, "{samp}/idx/{samp}.fa.pac"),
        sa = join(outdir, "{samp}/idx/{samp}.fa.sa")
    output:
        join(outdir, "{samp}/{samp}.bam")
    log:
        join(outdir, "{samp}/logs/bwa_mem.log")
    singularity:
        "shub://bsiranos/bin_genomes/singularity:binning"
    resources:
        mem=16,
        time=12
    threads: 24
    shell: """
        bwa mem -t {threads} {input.asm}  {input.reads} |samtools sort --threads {threads} > {output}
        """

rule align_lr:
    input:
        join(outdir, "{samp}/idx/{samp}.fa"),
        reads
    log:
        join(outdir, "{samp}/logs/align_lr.log")
    output:
        join(outdir, "{samp}/{samp}_lr.bam")
    singularity:
        "shub://bsiranos/bin_genomes/singularity:binning"
    resources:
        mem=48,
        time=6
    threads: 16
    shell: """
        minimap2 -t {threads} -ax map-ont {input} | samtools sort --threads {threads} > {output}
        """



rule metabat_pre:
    input:
        join(outdir, "{samp}/{samp}_lr.bam") if long_read else join(outdir, "{samp}/{samp}.bam") #choose a long read alignment or short read alignment
    output:
        join(outdir, "{samp}/{samp}.fa.depth.txt")
    singularity:
        "shub://bsiranos/bin_genomes/singularity:binning"
    shell: """
        jgi_summarize_bam_contig_depths --outputDepth {samp}/{samp}.fa.depth.txt --pairedContigs {samp}/{samp}.fa.paired.txt --minContigLength 1000 --minContigDepth 1  {input} --percentIdentity 50
        """

checkpoint metabat:
    input:
        join(outdir, "{samp}/idx/{samp}.fa"),
        rules.metabat_pre.output
    output:
        directory(join(outdir, "{samp}/bins/")) #the number of bins is unknown prior to execution
    singularity:
        "shub://bsiranos/bin_genomes/singularity:binning"
    resources:
        mem=64,
        time=24
    threads: 4
    shell: """
        metabat2 --seed 1 -t {threads} --unbinned --inFile {samp}/idx/{samp}.fa --outFile {samp}/bins/bin --abdFile {samp}/{samp}.fa.depth.txt
        """

rule checkm:
    input:
        lambda wildcards: expand(join(outdir, "{samp}/bins/{bin}.fa"), bin = get_bins(wildcards), samp = wildcards.samp)
    output:
        join(outdir, "{samp}/checkm/checkm.tsv")
    log:
        join(outdir, "{samp}/logs/checkm.log")
    singularity:
        "shub://bsiranos/bin_genomes/singularity:checkm"
    resources:
        mem=128,
        time=24
    threads: 24
    shell: """
        rm -rf {samp}/checkm/*
        checkm lineage_wf -t {threads} -x fa --tab_table -f {samp}/checkm/checkm.tsv {samp}/bins/ {samp}/checkm
        """

rule aragorn:
    input:
        join(outdir, "{samp}/bins/{bin}.fa")
    output:
        join(outdir, "{samp}/rna/trna/{bin}.fa.txt")
    log:
        join(outdir, "{samp}/logs/aragorn_{bin}.log")
    singularity:
        "shub://bsiranos/bin_genomes/singularity:binning"
    resources:
        mem=8,
        time=1
    shell:
        "aragorn -t {input} -o {output}"

rule barrnap:
    input:
        join(outdir, "{samp}/bins/{bin}.fa")
    output:
        join(outdir, "{samp}/rna/rrna/{bin}.fa.txt")
    log:
        join(outdir, "{samp}/logs/barrnap_{bin}.log")
    singularity:
        "shub://bsiranos/bin_genomes/singularity:binning"
    resources:
        mem=8,
        time=1
    shell:
        "barrnap {input} > {output}"

rule quast:
    input:
        join(outdir, "{samp}/bins/{bin}.fa")
    output:
        join(outdir, "{samp}/quast/{bin}.fa/report.txt")
    log:
        join(outdir, "{samp}/logs/quast_{bin}.log")
    singularity:
        "shub://bsiranos/bin_genomes/singularity:binning"
    resources:
        mem=8,
        time=1
    shell:
        "quast.py -o {samp}/quast/{wildcards.bin}.fa/ {input} " +
        "--contig-thresholds 0,10000,50000,100000,250000,500000,1000000,2000000,3000000 --fast "

rule prokka:
    input:
        join(outdir, "{samp}/bins/{bin}.fa")
    output:
        join(outdir, "{samp}/prokka/{bin}.fa/{samp}_{bin}.fa.gff")
    log:
        join(outdir, "{samp}/logs/prokka_{bin}.log")
    singularity:
        "shub://bsiranos/bin_genomes/singularity:binning"
    resources:
        mem=48,
        time=1,
    threads: 8
    shell:
        "prokka {input} --outdir {samp}/prokka/{wildcards.bin}.fa " +
        "--prefix {samp}_{wildcards.bin}.fa --centre X --compliant --force --cpus {threads} --noanno"

rule bam_idx:
    input:
        join(outdir, "{samp}/{samp}_lr.bam") if long_read else join(outdir, "{samp}/{samp}.bam") #choose a long read alignment or short read alignment
    output:
        join(outdir, "{samp}/{samp}_lr.bam.bai") if long_read else join(outdir, "{samp}/{samp}.bam.bai") #choose a long read alignment or short read alignment
    log:
        join(outdir, "{samp}/logs/bamidx.log")
    singularity:
        "shub://bsiranos/bin_genomes/singularity:binning"
    resources:
        mem=2,
        time=2
    shell:
        "samtools index {input}"

rule bam_idxstats:
    input:
        join(outdir, "{samp}/{samp}_lr.bam") if long_read else join(outdir, "{samp}/{samp}.bam"), #choose a long read alignment or short read alignment,
        join(outdir, "{samp}/{samp}_lr.bam.bai") if long_read else join(outdir, "{samp}/{samp}.bam.bai"), #choose a long read alignment or short read alignment,
    output:
        join(outdir, "{samp}/{samp}_lr.bam.bai.tsv") if long_read else join(outdir, "{samp}/{samp}.bam.bai.tsv"), #choose a long read alignment or short read alignment,
    log:
        join(outdir, "{samp}/logs/bamidxstats.log")
    singularity:
        "shub://bsiranos/bin_genomes/singularity:binning"
    resources:
        mem=2,
        time=2
    shell:
        "samtools idxstats {input[0]} > {output}"

rule bin_idxstats:
    input:
        join(outdir, "{samp}/bins/{bin}.fa"),
        join(outdir, "{samp}/{samp}_lr.bam.bai.tsv") if long_read else join(outdir, "{samp}/{samp}.bam.bai.tsv"), #choose a long read alignment or short read alignment,
    output:
        join(outdir, "{samp}/coverage/raw/{bin}.tsv")
    log:
        join(outdir, "{samp}/logs/coverage_idxstats_{bin}.log")
    singularity:
        "shub://bsiranos/bin_genomes/singularity:binning"
    resources:
        mem=2,
        time=1
    shell:
        "grep '>' {input[0]} | tr -d '>' | xargs -I foo -n 1 grep -P 'foo\t' {input[1]} > {output}"

rule bin_coverage:
    input:
        rules.bin_idxstats.output
    output:
        join(outdir, "{samp}/coverage/{bin}.txt")
    log:
        join(outdir, "{samp}/logs/coverage_{bin}.log")
    singularity:
        "shub://bsiranos/bin_genomes/singularity:binning"
    resources:
        mem=2,
        time=1
    params:
        read_length = config['read_length']
    script:
        "scripts/bin_coverage.py"

rule fasta_index:
    input:
        join(outdir, "{samp}/bins/{bin}.fa")
    output:
        join(outdir, "{samp}/bins/{bin}.fa.fai")
    log:
        join(outdir, "{samp}/logs/faidx_{bin}.log")
    singularity:
        "shub://bsiranos/bin_genomes/singularity:binning"
    resources:
        mem=8,
        time=1
    threads: 1
    shell:
        "samtools faidx {input}"

rule kraken2:
    input:
        join(outdir, "{samp}/idx/{samp}.fa")
    output:
        krak = join(outdir, "{samp}/classify/{samp}.krak"),
        krak_report = join(outdir, "{samp}/classify/{samp}.krak.report")
    log:
        join(outdir, "{samp}/logs/kraken_class.log")
    singularity:
        "shub://bsiranos/bin_genomes/singularity:binning"
    params: 
        db = config['kraken2db']
    resources:
        mem=256,
        time=1
    threads: 8
    shell: """
        kraken2 --db {params.db} --db {params.db} --threads {threads} \
        --output {output.krak} --report {output.krak_report} {input} 
        """

rule label_bins:
    input:
        rules.kraken2.output,
        lambda wildcards: expand(rules.fasta_index.output, bin = get_bins(wildcards), samp = wildcards.samp)
    output:
        join(outdir, "{samp}/classify/bin_species_calls.tsv")
    log:
        join(outdir, "{samp}/logs/assign_species.log")
    singularity:
        "shub://bsiranos/bin_genomes/singularity:binning"
    script:
        "scripts/assign_species.py"

rule postprocess_raw:
    input:
        rules.checkm.output,
        lambda wildcards: expand(rules.prokka.output, bin = get_bins(wildcards), samp = wildcards.samp),
        lambda wildcards: expand(rules.quast.output, bin = get_bins(wildcards), samp = wildcards.samp),
        lambda wildcards: expand(rules.aragorn.output, bin = get_bins(wildcards), samp = wildcards.samp),
        lambda wildcards: expand(rules.barrnap.output, bin = get_bins(wildcards), samp = wildcards.samp),
        lambda wildcards: expand(rules.bin_coverage.output, bin = get_bins(wildcards), samp = wildcards.samp),
        rules.label_bins.output
    output:
        join(outdir, "{samp}/final/prokka.tmp"),
        join(outdir, "{samp}/final/quast.tmp"),
        join(outdir, "{samp}/final/checkm.tmp"),
        join(outdir, "{samp}/final/trna.tmp"),
        join(outdir, "{samp}/final/rrna.tmp"),
        join(outdir, "{samp}/final/classify.tmp"),
        join(outdir, "{samp}/final/coverage.tmp"),
    log:
        join(outdir, "{samp}/logs/postprocess.log")
    resources:
        mem=2,
        time=1
    shell:
        "(echo 'Sample Bin Coverage' | tr ' ' '\t'; " +
            "cat {samp}/coverage/*.txt) > {samp}/final/coverage.tmp; " +
        "(echo 'Sample Bin Genes' | tr ' ' '\t'; \
            find {samp}/prokka/ -name '*.gff' | xargs grep -c CDS | cut -f4 -d '/' | sed 's/.fa.gff:/\t/g' | sed 's/{samp}_/{samp}\t/g' | sort -k2,2g) > {samp}/final/prokka.tmp; " + \
        "find {samp}/quast/ -name 'transposed_report.tsv' | xargs cat | sort -u | sed 's/^\(b..\)/{samp}\t\\1/g' | sed 's/^Assembly/Sample\tBin/g' > {samp}/final/quast.tmp; " + \
        "cat {samp}/checkm/checkm.tsv " + " | sed 's/^\(b..\)/{samp}\t\\1/g' | sed 's/^Bin Id/Sample\tBin/g' > {samp}/final/checkm.tmp; " + \
        "(echo 'Sample Bin tRNA' | tr ' ' '\\t'; \
            ls {samp}/rna/trna/ | xargs -n 1 -I foo sh -c \"grep 'Number of' {samp}/rna/trna/foo | cut -f2 -d= | tr -d ' ' | tr '\\n' '+' | sed 's/+$//g' | xargs echo | bc | sed 's/^/foo\\t/g' \" | sed 's/^/{samp}\\t/g' | sed 's/.fa.txt//g') > {samp}/final/trna.tmp; " +
        "(echo 'Sample Bin rna.16S rna.23S rna.5S' | tr ' ' '\t'; \
            paste \
            <(grep -c 16S {samp}/rna/rrna/* | sed 's/\/rna\/rrna\//\t/g' | sed 's/.fa.txt:/\t/g') \
            <(grep -c 23S {samp}/rna/rrna/* | sed 's/\/rna\/rrna\//\t/g' | sed 's/.fa.txt:/\t/g' | cut -f3) \
            <(grep -c 5S {samp}/rna/rrna/* | sed 's/\/rna\/rrna\//\t/g' | sed 's/.fa.txt:/\t/g' | cut -f3) \
            ) > {samp}/final/rrna.tmp; " + \
        "(echo 'Sample Bin Majority.Class Majority.Fraction Size.Mb Final.Class' | tr ' ' '\t'; " +
            "cat {samp}/classify/bin_species_calls.tsv" + " | sed 's/\.fa//g' | sed 's/^/{samp}\t/g') > {samp}/final/classify.tmp;"
#grep Total {samp}/rna/trna/* | sed 's/\/rna\/trna\//\\t/g' | sed 's/.fa.txt:Total tRNA genes = /\\t/g') > {samp}/final/trna.tmp; " + \

rule postprocess_final:
    input:
        rules.postprocess_raw.output
    output:
        join(outdir, "{samp}/final/{samp}.tsv")
    log:
        join(outdir, "{samp}/logs/postprocess.log")
    singularity:
        "shub://bsiranos/bin_genomes/singularity:binning"
    script:
        "scripts/join_final_tables.R"

rule bin_tig_mapping:
    input:
        rules.postprocess_final.output
    output:
        join(outdir, "{samp}/final/bin_tig_mapping.tsv")
    singularity:
        "shub://bsiranos/bin_genomes/singularity:binning"
    shell:
        "ls {samp}/bins/ | grep fai  | xargs -n 1 -I foo sh -c \"cat {samp}/bins/foo | sed 's/^/foo\t/g' \" | sed 's/.fa.fai//g' | cut -f1,2 > {output}"
